





springdoc.swagger-ui.path = /swagger
#spring.datasource.url=jdbc:postgresql://localhost:5432/${DB_NAME}
#spring.datasource.username=${DB_USERNAME}
#spring.datasource.password=${DB_PASSWORD}
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect




spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=password
spring.datasource.driverClassName=org.h2.Driver
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.path=/h2
spring.h2.console.settings.trace=false
spring.h2.console.settings.web-allow-others=true
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create

#thymleaf configurations
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

#smtp configurations
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=josgolf3@gmail.com
spring.mail.password =nswesfilbzmfgddx
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
 #Connection timeout in milliseconds (10 seconds in this example)
spring.mail.properties.mail.smtp.connectiontimeout=10000
 #IO timeout in milliseconds (10 seconds in this example)
spring.mail.properties.mail.smtp.timeout=10000


# Google OAuth 2.0 Configuration
spring.security.oauth2.client.registration.google.client-id=645033981168-4glqnvmpahbd12egp7p9umff63mm6p0u.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=profile,email
spring.main.allow-circular-references=true
app.oauth2.redirectUri=http://localhost:3000/oauth2/redirect

# LinkedIn OAuth 2.0 Configuration
spring.security.oauth2.client.registration.linkedin.client-id=7756gewvshmtpd
spring.security.oauth2.client.registration.linkedin.client-secret=248PZO2XRCZITEmu
spring.security.oauth2.client.registration.linkedin.scope=profile,email
spring.security.oauth2.client.registration.linkedin.redirect-uri=http://localhost:3000/oauth2/redirect
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.registration.linkedin.authorizationGrantType=authorization_code
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-name-attribute=email


#Paystack-API Configuration #Active Key could be Live or Test

paystack.secret.active=${PAYSTACK_SK_TEST}
paystack.secret.test=${PAYSTACK_SK_TEST}
paystack.secret.live=""


